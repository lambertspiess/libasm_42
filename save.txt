#include "libasm.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <errno.h>
#include <fcntl.h>

#define RED	"\x1b[31m"
#define GREEN	"\x1b[32m"
#define CYAN 	"\x1b[36m"
#define RESET	"\x1b[0m"

int		test;

static void	print_delim(char *s) {
	printf(CYAN"----------------%s----------------\n"RESET, s);
}

static void	strlen_test(char *s) {
	int ret1 = strlen(s); int ret2 = ft_strlen(s);
	printf("testing |%s|\nstandard = %d, libasm = %d\n", s, ret1, ret2);
	if (ret1 != ret2) {printf(RED"NO GO\n"RESET);}
	else {printf(GREEN"OK\n"RESET);}
}

static void	test_write(int fd, char *s)
{
	ssize_t	s1;
	ssize_t	s2;
	char	*testing;
	char	*errno_1;
	char	*errno_2;
	
	errno = 0;
	if (fd == 0) {
		printf(RESET" ");
		printf("Input anything : ");
		testing = fgets(s, 100, stdin);
		s1 = write(STDOUT_FILENO, testing, strlen(testing));
		errno_1 = strdup(strerror(errno));
		s2 = ft_write(STDOUT_FILENO, testing, strlen(testing));
		errno_2 = strdup(strerror(errno));
	}
	else {
		s1 = write(fd, s, strlen(s));
		errno_1 = strdup(strerror(errno));
		printf("\n");
		s2 = ft_write(fd, s, strlen(s));
		errno_2 = strdup(strerror(errno));
	}
	printf(RESET"\n");
	if (s1 == s2 || !strcmp(errno_1, errno_2))
		printf(GREEN"Test %d OK\n", test);
	else {
		ssize_t	diff = 0;
		diff = (s1 > s2) ? (s1 - s2) : (s2 - s1);
		printf(RED"Test %d KO - ", test);
		printf(RESET"   write : %ld > %ld < %ld : ft_write", s1, diff, s2);
	}
	printf(RESET"\n");
	free(errno_1);
	free(errno_2);
	test++;
}

static void	test_cmp(char *s1, char *s2)
{
	int	x1;
	int	x2;

	x1 = strcmp(s1, s2);
	x2 = ft_strcmp(s1, s2);
	if ((x1 < 0 && x2 < 0) || (x1 > 0 && x2 > 0) || (x1 == 0 && x2 == 0))
		printf(GREEN"Test %d OK\n", test);
	else
	{
		int	diff = 0;
		diff = (x1 > x2) ? (x1 - x2) : (x2 - x1);
		printf(RED"Test %d KO - ", test);
		printf(RESET"strcmp : %d > %d < %d : ft_strcmp\n", x1, diff, x2);
	}
	test++;
}

static void	test_stack_cmp(char *s1, char *s2)
{
	int libret = strcmp(s1, s2); int ftret = strcmp(s1, s2);
	
}

static void	test_cpy(char *dst, char *src)
{
	char	*x1;
	char	*x2;

	x1 = strcpy(dst, src);
	x2 = ft_strcpy(dst, src);
	if (strcmp(dst, src) == 0 && x1 == x2)
		printf(GREEN"Test %d OK\n", test);
	else
	{
		printf(RED"Test %d KO > [%s]\n", test, src);
		printf(RESET"   strcpy :%s|\nft_strcpy :%s|\n", x1, x2);
	}
	test++;
}

static void	test_dup(char *s)
{
	char	*s1;
	char	*s2;

	s1 = strdup(s);
	s2 = ft_strdup(s);
	if (!strcmp(s1, s2))
		printf(GREEN"Test %d OK\n", test);
	else
	{
		printf(RED"Test %d KO\n", test);
		printf(RESET"strdup :|%s|\nft_strdup :|%s|\n", s1, s2);
	}
	test++;
}

static void	test_read(int fd, char *s)
{
	ssize_t	s1;
	ssize_t	s2;
	char	*testing;
	char	*errno_1;
	char	*errno_2;
	
	if (fd == 0)
	{
		printf(RESET" ");
		printf("Input anything : ");
		testing = fgets(s, 1000, stdin);
		fd = open("tmp", O_RDWR | O_CREAT, 777777);
		write(fd, testing, strlen(testing));
		s1 = read(fd, testing, strlen(testing));
		errno_1 = strdup(strerror(errno));
		s2 = ft_read(fd, testing, strlen(testing));
		errno_2 = strdup(strerror(errno));
		close(fd);
		remove("tmp");
	}
	else
	{
		s1 = read(fd, s, strlen(s));
		errno_1 = strdup(strerror(errno));
		s2 = ft_read(fd, s, strlen(s));
		errno_2 = strdup(strerror(errno));
	}
	if (s1 == s2 || !strcmp(errno_1, errno_2))
		printf(GREEN"Test %d OK\n", test);
	else
	{
		ssize_t	diff = 0;
		diff = (s1 > s2) ? (s1 - s2) : (s2 - s1);
		printf(RED"Test %d KO - ", test);
		printf(RESET"   read : %ld > %ld < %ld : ft_read", s1, diff, s2);
	}
	printf(RESET"\n");
	free(errno_1);
	free(errno_2);
	test++;
}

int main(void) {
print_delim("STRLEN");

	strlen_test("Hello ,World !");
	strlen_test("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam vel pharetra enim. Quisque dictum nisl a erat convallis, at cursus nisi commodo. Nam egestas enim.");
	strlen_test("");
	strlen_test("     \n    \n\n");
	strlen_test("012345\06789");

print_delim("WRITE");

	test_write(STDOUT_FILENO, "Hello ,World !");
	int wt1 = open("testfile1",
	O_CREAT | O_TRUNC | O_RDWR, 0777);
	int wt2 = open("testfile2",
	O_CREAT | O_TRUNC | O_RDWR, 0777);
	ft_write(wt1, "lala", 5); ft_write(wt2, "lala", 5);
	test_write(STDOUT_FILENO, "Hello ,World !");
	test_write(STDERR_FILENO, "Hello ,World !");
	test_write(STDOUT_FILENO, "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam vel pharetra enim. Quisque dictum nisl a erat convallis, at cursus nisi commodo. Nam egestas enim.");
	test_write(STDOUT_FILENO, "");
	test_write(STDOUT_FILENO, "     \n    \n\n");
	test_write(STDOUT_FILENO, "012345\06789");

print_delim("STRCMP");

	test_cmp("Toto est cont", "Toto est content");
	test_cmp("Toto est content", "Toto est cont");
	test_cmp("Toto est content", "Toto est content");
	test_cmp("Toto est content", "Toto est contant");
	test_cmp("Toto est contant", "Toto est content");
	test_stack_cmp("hello", "hello");
	test_stack_cmp("", "");
	test_stack_cmp("", "beautiful world");
	test_stack_cmp("beautiful world", "");

print_delim("STRCPY");

	char buf[4096];
	bzero(buf, 4096);
	test_cpy(buf, "Hello ,World !");
	bzero(buf, 100);
	test_cpy(buf, "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam vel pharetra enim. Quisque dictum");
	bzero(buf, 100);
	test_cpy(buf, "");
	bzero(buf, 100);
	test_cpy(buf, "     \n    \n\n");
	bzero(buf, 100);
	test_cpy(buf, "012345\06789");
	bzero(buf, 100);

print_delim("STRDUP");

	test_dup("Hello ,World !");
	test_dup("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam vel pharetra enim. Quisque dictum nisl a erat convallis, at cursus nisi commodo. Nam egestas enim.");
	test_dup("");
	test_dup("     \n    \n\n");
	test_dup("012345\06789");

print_delim("READ");

	test_read(0, buf);
	test_read(0, buf);
	test_read(-1, buf);
	test_read(784, buf);
	return (0);
}
